# This file is managed by Puppet via the "<%= @module_name %>" module.
#
# vim: filetype=configparser

[kojid]
; The number of seconds to sleep between tasks
; sleeptime=15

; The maximum number of jobs that kojid will handle at a time
; maxjobs=10

; The minimum amount of free space (in MBs) required for each build root
; minspace=8192

; The directory root where work data can be found from the koji hub
topdir=<%= @top_dir %>

; The directory root for temporary storage
workdir=<%= @work_dir %>

; The directory root for mock
; mockdir=/var/lib/mock

; The user to run as when doing builds
; mockuser=kojibuilder

; The vendor to use in rpm headers
; vendor=Koji

; The packager to use in rpm headers
; packager=Koji

; The distribution to use in rpm headers
; distribution=Koji

; The _host string to use in mock
; mockhost=koji-linux-gnu

; Timeout for build duration (24 hours)
; rpmbuild_timeout=86400

; The URL for the xmlrpc server
server=<%= @hub %>

; The URL for the file access
topurl=<%= @downloads %>

; A space-separated list of tuples from which kojid is allowed to checkout.
; The format of those tuples is:
;
;     host:repository[:use_common[:source_cmd]]
;
; Incorrectly-formatted tuples will be ignored.
;
; If use_common is not present, kojid will attempt to checkout a common/
; directory from the repository.  If use_common is set to no, off, false, or 0,
; it will not attempt to checkout a common/ directory.
;
; source_cmd is a shell command (args separated with commas instead of spaces)
; to run before building the srpm. It is generally used to retrieve source
; files from a remote location.  If no source_cmd is specified, "make sources"
; is run by default.
;allowed_scms=scm.example.com:/cvs/example git.example.org:/example svn.example.org:/users/*:no
allowed_scms=<%= @allowed_scms %>

; The mail host to use for sending email notifications
smtphost=<%= @smtp_host %>

; The From address used when sending email notifications
from_addr=Koji Build System <buildsys@<%= @fqdn %>>

;configuration for Kerberos authentication

;the format of the principal used by the build hosts
;%s will be replaced by the FQDN of the host
;host_principal_format = compile/%s@EXAMPLE.COM

;location of the keytab
;keytab = /etc/kojid/kojid.keytab

;the service name of the principal being used by the hub
;krbservice = host

;configuration for SSL authentication

;client certificate
cert = /etc/kojid/client.pem

;certificate of the CA that issued the client certificate
ca = /etc/kojid/clientca.crt

;certificate of the CA that issued the HTTP server certificate
serverca = /etc/kojid/serverca.crt

# ==========
# DISCLAIMER
# ==========
#
# The follow options were gleaned from get_options() in /usr/sbin/kojid.
# There is no documentation for these and perhaps no promise of future
# support.  However, get_options() does seem to fail for any unknown option.
# Any documentation given here was learned the hard way through
# experimentation and analyses of the source.

;admin_emails
;ccache
;createrepo_skip_stat
;createrepo_update
;failed_buildroot_lifetime
;keepalive
;krb_principal
;literal_task_arches

# It appears that log_level *may* have been obsoleted by the --debug and
# --verbose CLI options but this hasn't been substantiated.
# One of: CRITICAL, ERROR, WARNING, INFO or DEBUG
;log_level=DEBUG

;maven_repo_ignore
;max_retries
;offline_retry
;offline_retry_interval
;password
;pkgurl
;pluginpath
;retry_interval
;rpmbuild_timeout
;support_rpm_source_layout
;use_fast_upload

# The user name has to match the host name you used with "koji add-host ...".
# Ordinarilly, kojid will authenticate to the Hub using the Common Name from
# the client certificate (see "cert" setting above) as the user name.  The
# "user" setting *might* allow you to ovrride the CN.
;user=<%= @fqdn %>

;yum_proxy
