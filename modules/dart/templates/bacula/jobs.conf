#
# Bacula Director Configuration -- Job Definitions
#
# Origin: modules/dart/templates/bacula/jobs.conf
#

JobDefs {
    Name = "Default"
    Type = Backup
    Level = Incremental
    FileSet = "default"
    Schedule = "FirstWeeklyCycle"
    Storage = File
    Messages = Standard
    Pool = File
    Priority = 10
    Write Bootstrap = "/var/spool/bacula/%c.bsr"
}

Job {
    Name = "File Server Root"
    Client = mdct-00fs
    JobDefs = "Default"
    Schedule = "SecondWeeklyCycle"
    #  Schedule = "Never"
}

Job {
    Name = "File Server Easily Compressed"
    Client = mdct-00fs
    JobDefs = "Default"
    FileSet = "File Server Easily Compressed"
    Schedule = "ThirdWeeklyCycle"
    #  Schedule = "Never"
}

Job {
    Name = "File Server Storage"
    Client = mdct-00fs
    JobDefs = "Default"
    FileSet = "File Server Storage"
    Schedule = "ThirdWeeklyCycle"
    #  Schedule = "Never"
}

Job {
    Name = "File Server Home"
    Client = mdct-00fs
    JobDefs = "Default"
    FileSet = "File Server Home"
    Schedule = "SecondWeeklyCycle"
    #  Schedule = "Never"
}

Job {
    Name = "File Server Virtual Machines"
    Client = mdct-00fs
    JobDefs = "Default"
    FileSet = "File Server Virtual Machines"
    Schedule = "FourthWeeklyCycle"
    #  Schedule = "Never"
}

Job {
    Name = "File Server Remote Backups"
    Client = mdct-00fs
    JobDefs = "Default"
    FileSet = "File Server Remote Backups"
    Schedule = "FourthWeeklyCycle"
    #  Schedule = "Never"
}

Job {
    Name = "File Server Projects"
    Client = mdct-00fs
    JobDefs = "Default"
    FileSet = "File Server Projects"
    Schedule = "SecondWeeklyCycle"
    #  Schedule = "Never"
}

Job {
    Name = "Bacula Server"
    Client = "<%= scope.lookupvar('dart::params::bacula_dir_name') %>"
    JobDefs = "Default"
}

Job {
     Name = "Florian Workstation"
     Client = mdct-dev12
     JobDefs = "Default"
     FileSet = "mdct-dev12"
}

Job {
    Name = "EST Server"
    Client = mdct-00dw
    JobDefs = "Default"
    FileSet = "mdct-00dw snapshot"
    RunScript {
        Command = "/usr/sbin/backup-snapshot prepare"
        RunsWhen = Before
        RunsOnClient = yes
        FailJobOnError = yes
    }
    RunScript {
        Command = "/usr/sbin/backup-snapshot teardown"
        RunsWhen = After
        RunsOnClient = yes
        # Clean up regardless of the Jobs success/failure.
        RunsOnFailure = yes
        RunsOnSuccess = yes
    }
}

Job {
    Name = "TestLink Server"
    Client = mdct-00tl
    JobDefs = "Default"
    FileSet = "default"
    RunScript {
        Command = "systemctl stop mysqld.service"
        RunsWhen = Before
        RunsOnClient = yes
        FailJobOnError = yes
    }
    RunScript {
        Command = "systemctl start mysqld.service"
        RunsWhen = After
        RunsOnClient = yes
        # Clean up regardless of the Jobs success/failure.
        RunsOnFailure = yes
        RunsOnSuccess = yes
    }
}

Job {
    Name = "Teamcenter Server"
    Client = mdct-tc
    JobDefs = "Default"
    FileSet = "mdct-tc snapshot"
    RunScript {
        Command = "/usr/sbin/backup-snapshot prepare"
        RunsWhen = Before
        RunsOnClient = yes
        FailJobOnError = yes
    }
    RunScript {
        Command = "/usr/sbin/backup-snapshot teardown"
        RunsWhen = After
        RunsOnClient = yes
        # Clean up regardless of the Jobs success/failure.
        RunsOnFailure = yes
        RunsOnSuccess = yes
    }
}

Job {
    Name = "NGIC Server"
    Client = mdct-ngic
    JobDefs = "Default"
    FileSet = "mdct-ngic snapshot"
    RunScript {
        Command = "/usr/sbin/backup-snapshot prepare"
        RunsWhen = Before
        RunsOnClient = yes
        FailJobOnError = yes
    }
    RunScript {
        Command = "/usr/sbin/backup-snapshot teardown"
        RunsWhen = After
        RunsOnClient = yes
        # Clean up regardless of the Jobs success/failure.
        RunsOnFailure = yes
        RunsOnSuccess = yes
    }
}

Job {
    Name = "Design Review Server"
    Client = mdct-dr
    JobDefs = "Default"
    FileSet = "mdct-dr snapshot"
    RunScript {
        Command = "/usr/sbin/backup-snapshot prepare"
        RunsWhen = Before
        RunsOnClient = yes
        FailJobOnError = yes
    }
    RunScript {
        Command = "/usr/sbin/backup-snapshot teardown"
        RunsWhen = After
        RunsOnClient = yes
        # Clean up regardless of the Jobs success/failure.
        RunsOnFailure = yes
        RunsOnSuccess = yes
    }
}

Job {
    Name = "Fogbugz Server"
    Client = fogbugz
    JobDefs = "Default"
}

Job {
    Name = "MDCT-00cc"
    Client = mdct-00cc
    JobDefs = "Default"
}

Job {
    Name = "MDCT-00is Root"
    Client = mdct-00is
    JobDefs = "Default"
}

Job {
    Name = "MDCT-00is Storage"
    Client = mdct-00is
    JobDefs = "Default"
    FileSet = "mdct-00is"
}

Job {
    Name = "mdct-aos-master"
    Client = mdct-aos-master
    JobDefs = "Default"
}

Job {
    Name = "LDAP Server"
    Client = mdct-ldap
    JobDefs = "Default"
}

Job {
    Name = "Nessus Server"
    Client = mdct-nessus
    JobDefs = "Default"
}

Job {
    Name = "Puppet Server"
    Client = mdct-puppet
    JobDefs = "Default"
}

Job {
    Name = "MDCT-pres1"
    Client = mdct-pres1
    JobDefs = "Default"
    FileSet = "mdct-pres1"
}

Job {
    Name = "mdct-nexus"
    Client = mdct-nexus
    JobDefs = "Default"
}

Job {
    Name = "mdct-teamcity"
    Client = mdct-teamcity
    JobDefs = "Default"
}

# Backup the catalog database (after the nightly save)
Job {
    Name = "Backup Catalog"
    JobDefs = "Default"
    Client="<%= scope.lookupvar('dart::params::bacula_dir_name') %>"
    Level = Full
    FileSet = "Catalog"
    Schedule = "WeeklyCycleAfterBackup"
    # This creates an ASCII copy of the catalog
    # Arguments to make_catalog_backup.pl are:
    #  make_catalog_backup.pl <catalog-name>
    RunBeforeJob = "/usr/libexec/bacula/make_catalog_backup.pl MyCatalog"
    # This deletes the copy of the catalog
    RunAfterJob  = "/usr/libexec/bacula/delete_catalog_backup"
    # Maintain a separate, off-host copy of the Bacula conf files in case it is
    # the Bacula server itself that needs to be restored.
    RunAfterJob = "/etc/bacula/backup_conf_files"
    Write Bootstrap = "/var/spool/bacula/%n.bsr"
    Priority = 11                   # run after main backup
}

# Standard Restore template, to be changed by Console program.  Only one such
# job is needed for all Jobs/Clients/Storage ...
Job {
    Name = "Restore Files"
    Type = Restore
    Client = "<%= scope.lookupvar('dart::params::bacula_dir_name') %>"
    FileSet="default"
    Storage = File
    Pool = File
    Messages = Standard
    Where = /tmp/bacula-restores
}
