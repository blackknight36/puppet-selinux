#!/bin/bash

# Synopsis:
#       Disburse MDC's weather imagery and other media-playback content to the
#       directories unique to each AOS device for their later pickup.
#
# Note:
#       This file is managed/deployed by puppet.


# --- Configurables (start) ---

# REST controls how long this script will sleep between disbursals.  This
# should be long enough to horde resources, yet low enough to not interfere
# with emergency 'priority' media content.
REST=10

# WEATHER_INTERVAL controls how many seconds must elapse before the
# LOCAL_WEATHER_CACHE is refreshed from REMOTE_WEATHER_CACHE.
WEATHER_INTERVAL=1800

# Weather imagery is available remotely from REMOTE_WEATHER_CACHE.  NB: This
# is technically local, but as a NFS mount whose source crosses the WAN, it
# may as well be remote.
REMOTE_WEATHER_CACHE='/storage/slideshow/weathermedia'

# Any media content files located within COMMON_CONTENT_CACHE will be
# disbursed to each AOS client device.
COMMON_CONTENT_CACHE='/storage/slideshow/common'

# Under DISBURSAL_ROOT there should be one directory for each client AOS
# device where shared common media content can be copied.  Additional content
# that is client-specific may also be pushed into these directories via other
# processes.
DISBURSAL_ROOT="/storage/slideshow/leola"

# --- Configurables (end) ---

SELF="$(basename $0)"
LOCK="/var/lock/${SELF}"
LOCAL_WEATHER_CACHE="/var/cache/${SELF}/weather-media"



# freshen_local_weather_cache exists primarily to avoid repeated WAN
# traversals for content during the disbursal phase.
freshen_local_weather_cache() {
    if [ $(date +%s) -gt $(( $prior_weather +  $WEATHER_INTERVAL )) ]
    then
        echo "Freshening local weather imagery cache ..."
        mkdir -p ${LOCAL_WEATHER_CACHE}/.partial
        rsync -av --delete --partial \
            --partial-dir=${LOCAL_WEATHER_CACHE}/.partial \
            ${REMOTE_WEATHER_CACHE}/* ${LOCAL_WEATHER_CACHE}/
        prior_weather=$(date +%s)
    fi
}


copy_area() {
    local origin="$1"
    local target="$2"
    local name="$3"
    echo "Copying $name media content from $origin to $target ..."
    cp -alr "${origin}"/* "$target"
}


freshen_client_area() {
    local client
    for client in $(find $DISBURSAL_ROOT -maxdepth 2 -type d -name livemedia)
    do
        local next_area="${client}.next"
        echo "Creating 'next' client area: $next_area"
        [ -d "$next_area" ] && rm -r "$next_area"
        mkdir -p "$next_area"
        copy_area "$LOCAL_WEATHER_CACHE" "$next_area" 'MDC weather'
        copy_area "$COMMON_CONTENT_CACHE" "$next_area" 'common'
        copy_area "$client" "$next_area" 'client-specific'
        echo "Activating 'next' client area ..."
        local client_area="${client}.pool"
        [ -d "$client_area" ] && rm -r "$client_area"
        mv "$next_area" "$client_area"
    done
}


cleanup() {
    rm $LOCK
    exit 2
}


main() {
    # Only allow one instance to run at a time.
    (
        if flock --nonblock 200
        then
            trap cleanup INT TERM
            prior_weather=0
            while true
            do
                echo "Starting ..."
                freshen_local_weather_cache
                freshen_client_area
                echo "Done.  Sleeping for $REST seconds ..."
                sleep $REST
            done
        else
            echo "Aborting since another $SELF process is already running."
            exit 1
        fi
    ) 200> $LOCK
    exit 0
}


( main "$@" 2>&1 | logger -i -t $SELF ) &
