#!/bin/sh

# Copyright 2014 John Florian <jflorian@doubledog.org>
# License: GPLv3
#
#
# Description:
#       Perform the following cleanups for puppet-3:
#
#       - replace hyphens in class- and define-names with underscores
#
# Usage:
#       The intended use of this tool goes something like this:
#               1. Ensure the git working copy is clean with no uncommitted
#               changes, etc.
#               2. Create a new branch, i.e.:
#                       git checkout -b puppet-3-compat
#               3. Run this tool, i.e.:
#                       cd /etc/puppet
#                       tools/revise-resources-for-puppet-3
#               4. Perform validation trials.
#               5. Merge the topic branch into master or wherever is
#               appropriate.


# The puppet version this tool will bring resources up to.
COMPAT_LEVEL='3'

# Space-delimited list of paths where to recursively look for resources that
# may need to be updated.
SEARCH_PATH='manifests/ modules/'


#
# Helper Functions
#

commit() {
    echo '>> committing changes'
    git commit \
        --quiet \
        --message="Refactor - adjustment for puppet-$COMPAT_LEVEL compatibility

This is an automated commit produced by $0.
It is only one such commit in a series.  This revision specifically:

$@"
}

fail() {
    echo >&2 ">> FATAL ERROR: $@"
    exit 1
}

file_path_to_module_path() {
    # Examples:
    #   modules/foo/manifests/bar.pp            ==> foo::bar
    #   modules/foo/manifests/bar/baz/qux.pp    ==> foo::bar::baz::qux
    local file_path="$1"
    echo $file_path | sed 's!^modules/!!;s!manifests/!!;s!\.pp$!!;s!/!::!g'
}

module_paths() {
    find modules/ -maxdepth 1 -mindepth 1 -type d
}

okay_to_run() {
    git diff --quiet || fail 'You have uncommitted changes.'
    [ -z "${GIT_COMMITTER_EMAIL}" ] && fail 'GIT_COMMITTER_EMAIL must be set.'
    [ -z "${GIT_COMMITTER_NAME}" ] && fail 'GIT_COMMITTER_NAME must be set.'
}

reverse_paths() {
    #   Sort path names to be in reverse sorted order (without their suffix)
    #   so that the longest, most specific names can be processed before those
    #   that may share a similar prefix.  (Consider the handling of
    #   my-stupid-class and my-stupid-class-act.)  It won't be necessary to
    #   reappend the suffix since that's done here.
    sed 's/\.pp$//' | sort -r | sed 's/$/.pp/'
}


#
# Corrective Functions
#

repair_headers() {
    # Rationale:
    #   Many resources have been relocated and their internal documentation
    #   may now be inconsistent.
    # Objective:
    #   Correct the internal documentation.
    # Caveats:
    #   This may fix headers that this tool didn't break.  ;-)
    local manifest
    echo -e "\n>> Repairing internal documentation references."
    for manifest in $(find $SEARCH_PATH -type f -name '*.pp' -a ! -wholename '*TEMPLATE*')
    do
        sed --in-place --regexp-extended \
            "s!^# modules/.*!# $manifest!" \
            "$manifest"
        git add "$manifest"
    done
    commit '- Repaired internal documentation references.'
}

replace_deprecated_hyphens() {
    # Rationale:
    #   Puppet has deprecated the use of hyphens in class and definition names
    #   due to inconsistent behavior.  They might be confused for subtraction.
    #   There had been threats to make such names illegal as of puppet-3, but
    #   as of 3.4 that doesn't seem to have happened.  Regardless, it's
    #   probably best to clean up any such cases.
    # Objective:
    #   Locate all *.pp files containing a hypen; they contain a culprit.
    #   Transmogrify the path name into the equivalent identifier (class or
    #   definition).  Perform character substitution on that name to derive
    #   the corrected name.
    local old_name new_name old_manifest new_manifest manifest
    echo -e "\n>> Correcting class- and define-names with hyphens."
    for old_manifest in $(find $SEARCH_PATH -name '*-*.pp' | reverse_paths)
    do
        new_manifest="$(echo $old_manifest | sed 's/-/_/g')"
        echo ">>>> renaming $old_manifest to $new_manifest"
        git mv "$old_manifest" "$new_manifest"
        old_name=$(file_path_to_module_path $old_manifest)
        new_name=$(file_path_to_module_path $new_manifest)
        echo ">>>> replacing $old_name with $new_name"
        for manifest in $(git grep -l "$old_name" $SEARCH_PATH | reverse_paths)
        do
            echo ">>>>>> revising $manifest"
            sed --in-place "s/\<$old_name\>/$new_name/g" $manifest
            git add $manifest
        done
        commit "- Renamed \"$old_name\" to \"$new_name\"."
    done
}

main() {
    okay_to_run
    replace_deprecated_hyphens
    repair_headers
}


main
